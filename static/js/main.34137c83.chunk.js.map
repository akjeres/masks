{"version":3,"sources":["helpers/yt_helper.js","helpers/API-key.js","components/card.js","components/list.js","components/header.js","App.js","serviceWorker.js","index.js","helpers/channel-id.js"],"names":["YT_API","constructor","get_videos_from_list","channel_ID","fetch","this","endpoint","then","res","json","Error","JSON","stringify","error","Card","React","Component","render","className","src","props","data","thumbnails","high","url","alt","title","description","href","List","list","map","i","key","etag","id","videoId","snippet","Header","App","super","get_list","api","console","log","new_state","items","is_loading","prevPageToken","nextPageToken","setState","catch","e","parse","message","state","componentDidMount","componentDidUpdate","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34137c83.chunk.js","sourcesContent":["import { API_key as key } from './API-key';\n\nexport default class YT_API {\n    constructor () {\n        this.endpoint = 'https://www.googleapis.com/youtube/v3';\n    }\n\n    get_videos_from_list = ( { channel_ID } ) => {\n        return fetch(`${ this.endpoint }/search?key=${ key }` +\n            `&channelId=${ channel_ID }` +\n            `&part=snippet,id` +\n            `&type=video` +\n            `&order=date` +\n            `&maxResults=18` /*+\n         `&pageToken=${ token }`*/\n        )\n            .then(res => {\n                return res.json();\n            })\n            .then(res => {\n                if ('error' in res) throw new Error(JSON.stringify(res.error));\n\n                return res;\n            })\n    }\n}","export const API_key = 'AIzaSyD0qpDMAMh6rl9Rvf6GnaGc5JSLKtjn1P0';","import React from 'react';\n\nexport default class Card extends React.Component {\n    render() {\n        return (\n            <div className=\"mb-4 col-lg-4 col-md-6 col-12\">\n                <div className=\"h-100\">\n                    <div className=\"h-100 card\">\n                        <img src={this.props.data.thumbnails.high.url} className=\"card-img-top\" alt={this.props.data.title} />\n                        <div className=\"d-flex flex-column card-body\">\n                            <h5 className=\"card-title\">{this.props.data.title}</h5>\n                            <p className=\"flex-grow-1 card-text\">{this.props.data.description}</p>\n                            <a href=\"#\" className=\"btn btn-primary align-self-center\">Play Demo</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};","import React from 'react';\nimport Card from './card';\n\nexport default class List extends React.Component {\n    render() {\n        const { list } = this.props;\n        return (\n            <div className=\"list\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        { list.map((i) => {\n                            return <Card\n                                key={ i.etag }\n                                id={ i.id.videoId }\n                                data={ i.snippet }\n                            />\n                        }) }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};","import React from 'react';\n\nexport default class Header extends React.Component {\n  render() {\n      return (\n          <header></header>\n      );\n  }\n};","import React from 'react';\nimport './App.css';\n\nimport YT_API from './helpers/yt_helper';\n\nimport List from \"./components/list\";\nimport Header from \"./components/header\";\n\nexport default class App extends React.Component {\n    constructor() {\n        super();\n        console.log(this.props);\n        this.api = new YT_API();\n        this.state = {\n          channel_ID: null,\n          prevPageToken: null,\n          nextPageToken: null,\n          list: [],\n          is_loading: true,\n        };\n        console.log('constructor: ', this.state);\n    }\n\n    get_list = (id) => {\n\n        this.api.get_videos_from_list({ channel_ID: id })\n            .then(res => {\n                console.log(res);\n                const new_state = {\n                    channel_ID: id,\n                    list: res.items,\n                    is_loading: false,\n                };\n                new_state.prevPageToken = ('prevPageToken' in res) ? res.prevPageToken : null;\n                new_state.nextPageToken = ('nextPageToken' in res) ? res.nextPageToken : null;\n\n                this.setState(new_state);\n            })\n            .catch(e => {\n                console.error(JSON.parse(e.message));\n                this.setState({\n                    prevPageToken: null,\n                    nextPageToken: null,\n                    channel_ID: id,\n                    list: [],\n                    is_loading: false,\n                });\n            });\n    };\n\n    componentDidMount() {\n        const { channel_ID } = this.props;\n        console.log('did mount: ', this.state);\n        this.get_list(channel_ID);\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!(\n                ( prevState.prevPageToken === this.state.prevPageToken )\n                && ( prevState.nextPageToken === this.state.nextPageToken )\n            )) {\n            this.get_list(this.state.channel_ID);\n        }\n    };\n\n    render() {\n        console.log('render: ', this.state);\n        const { list } = this.state;\n        return (\n            <div className=\"App\">\n                <Header />\n                <List list={ list }/>\n            </div>\n        );\n    };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { channel_ID } from './helpers/channel-id';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App channel_ID={ channel_ID }/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const channel_ID = 'UCHS9TqaY4gbhs-QvjH3lxAg';"],"sourceRoot":""}